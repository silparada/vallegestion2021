
unit vendedores_fm;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  System.IOUtils,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, FireDAC.Stan.Intf, FireDAC.Stan.Option,
  Vcl.Imaging.jpeg, System.ImageList, Vcl.ImgList,
  Vcl.WinXCtrls, Vcl.WinXPickers, Vcl.ToolWin, Vcl.StdCtrls, Vcl.Buttons,
  Vcl.ExtCtrls, Vcl.ComCtrls, Data.DB, frxClass, frxDBSet,
  FireDAC.Stan.Param, FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf,
  FireDAC.DApt.Intf, FireDAC.Stan.Async, FireDAC.DApt, FireDAC.Comp.DataSet,
  FireDAC.Comp.Client;


type
  TFmVendedores = class(TForm)
    ToolBar1: TToolBar;
    TB_readdb: TToolButton;
    TB_add: TToolButton;
    TB_edit: TToolButton;
    TB_Delete: TToolButton;
    ListView1: TListView;
    TB_Exit: TToolButton;
    Panel2: TPanel;
    Ed_busqueda: TEdit;
    Pn_EditAdd: TPanel;
    Bc_Aceptar: TBitBtn;
    BC_Cancelar: TBitBtn;
    TS_SoloActivos: TToggleSwitch;
    StatusBar1: TStatusBar;
    TB_Print: TToolButton;
    Pn_Imprimir: TPanel;
    frxReport1: TfrxReport;
    BC_AceptarPrint: TBitBtn;
    BC_CancelarPrint: TBitBtn;
    CV_PrintSoloActivos: TCheckBox;
    frxDBDataset1: TfrxDBDataset;
    CV_Activo: TCheckBox;
    Label6: TLabel;
    Ed_IdVendedor: TEdit;
    Label4: TLabel;
    Ed_nombre: TEdit;
    Label5: TLabel;
    Ed_Comision: TEdit;
    Me_Observaciones: TMemo;
    Label1: TLabel;
    FDQuery1: TFDQuery;
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure TB_DeleteClick(Sender: TObject);
    procedure TB_readdbClick(Sender: TObject);
    procedure TB_ExitClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure ListView1Data(Sender: TObject; Item: TListItem);
    procedure Ed_busquedaChange(Sender: TObject);
    procedure FormDestroy(Sender: TObject);
    procedure d3_ListViewCustomDrawItem(Sender: TCustomListView;
      Item: TListItem; State: TCustomDrawState; var DefaultDraw: Boolean);
    procedure Bc_AceptarClick(Sender: TObject);
    procedure TB_editClick(Sender: TObject);
    procedure BC_CancelarClick(Sender: TObject);
    procedure TB_addClick(Sender: TObject);
    procedure BC_AceptarPrintClick(Sender: TObject);
    procedure BC_CancelarPrintClick(Sender: TObject);
    procedure TB_PrintClick(Sender: TObject);
    procedure ListView1DblClick(Sender: TObject);

  private
    { Private declarations }
    procedure ApplyFilter(const S: string);
    procedure Bloqueo;
    procedure DesBloqueo;
  public
    { Public declarations }
  end;

var
  FmVendedores: TFmVendedores;

implementation
{$R *.dfm}

uses
 //CLASS
  vendedores,  eventos,
   main, UtilsFunc,rp_utils,importsdll;

var

  ListaActiva : TStringList;
  ListaCompleta : TStringList;
  bm: TBitmap;
  pn: TPanel;
  img: TImage;
  Editar : Boolean;

procedure TFmVendedores.Bloqueo;
begin
  //FmClientes
  BorderStyle := bsSingle;
  bm := GetFormImage;
  FadeBitmap(bm);
  pn := TPanel.Create(nil);
  img := TImage.Create(nil);
  img.Parent := pn;
     pn.BoundsRect := ClientRect;
     pn.BevelOuter := bvNone;
     img.Align := alClient;
     img.Picture.Bitmap.Assign(bm);
     pn.Parent := Self;
end;
procedure TFmVendedores.DesBloqueo;
begin
  img.Free;
  pn.Free;
  bm.Free;
end;

procedure TFmVendedores.ApplyFilter(const S: string);
var
  I: Integer;
begin
  ListView1.Items.BeginUpdate;
  try
    ListView1.Clear;
    ListaActiva.Clear;
    //SHOWMESSAGE('OKA');
    for I := 0 to ListaCompleta.Count - 1 do
      if (S = '') or (Pos(UpperCase(S), UpperCase(ListaCompleta[i]) )  <> 0 ) then
        ListaActiva.AddObject(ListaCompleta[I], ListaCompleta.Objects[i] );
    ListView1.Items.Count := ListaActiva.Count;
  finally
    ListView1.Items.EndUpdate;
  end;
  StatusBar1.Panels[0].Text :=  'Registros: '+IntToStr(ListView1.Items.Count);
end;


procedure TFmVendedores.Bc_AceptarClick(Sender: TObject);
var
 Vendedor : TVendedor;
begin
  Vendedor := TVendedor.create ;

  Vendedor.IdVendedor := StrToInt(Ed_IdVendedor.Text);
  Vendedor.nombre := Ed_Nombre.Text;
  Vendedor.comision := StrToFloat( Ed_Comision.text);
  Vendedor.Activo :=  CV_Activo.Checked;


  if EDITAR then
   begin
    VendedoresEditar(Vendedor);
    ListaActiva.Objects[ListView1.ItemIndex] := Vendedor;
    EventosAgregar('Editar vendedor '+ Ed_IdVendedor.text  );

   end
  else
   begin
    VendedoresAgregar(Vendedor);
    ListaCompleta.AddObject(Vendedor.Nombre, Vendedor);
    ListaActiva.AddObject(Vendedor.Nombre, Vendedor);
    ListView1.Items.Count := ListaActiva.Count;
    StatusBar1.Panels[0].text := 'Registros: '+ IntToStr(ListaActiva.Count);

   end;


 Vendedor.free;

 screen.Cursor := crDefault;
 Desbloqueo;
 Pn_EditAdd.Visible := false;
end;

procedure TFmVendedores.BC_CancelarClick(Sender: TObject);
begin
 desbloqueo;
 Pn_EditAdd.Visible := false;
end;

procedure TFmVendedores.BC_CancelarPrintClick(Sender: TObject);
begin
 desbloqueo;
 Pn_Imprimir.Visible := false;
end;

procedure TFmVendedores.BC_AceptarPrintClick(Sender: TObject);
begin

  FDQuery1.SQL.CLEAR;
  FDQuery1.SQL.ADD('SELECT * FROM vendedores ORDER BY NOMBRE WHERE activo=TRUE');

  frxReport1.LoadFromFile( AjusteObj.CarpReportes+'\vendedores.fr3')   ;
  FDQuery1.open;
  SetUpReporte(frxReport1,'Vendedores');

  frxReport1.ShowReport;
  Desbloqueo;
  Pn_imprimir.Visible := false;
end;

procedure TFmVendedores.d3_ListViewCustomDrawItem(Sender: TCustomListView;
  Item: TListItem; State: TCustomDrawState; var DefaultDraw: Boolean);
begin
  if Odd(Item.Index) then
    // odd list items have green background
    Sender.Canvas.Brush.Color := clsilver
  else
    // even list items have window colour background
    Sender.Canvas.Brush.Color := clWindow;
  DefaultDraw := true;
end;

procedure TFmVendedores.Ed_busquedaChange(Sender: TObject);
begin
  ApplyFilter((Sender as TEdit).Text);
end;

procedure TFmVendedores.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  action := cafree;
end;

procedure TFmVendedores.FormCreate(Sender: TObject);
begin

 ListaCompleta := TStringList.create;
 ListaActiva := TStringList.Create;


 TB_readdb.Click;
end;


procedure TFmVendedores.FormDestroy(Sender: TObject);
begin
  ListaCompleta.Free;
  ListaActiva.Free;
end;



procedure TFmVendedores.ListView1Data(Sender: TObject; Item: TListItem);
begin
  with Item do
   begin
   Caption :=  IntToStr(TVendedor(ListaActiva.objects[Item.Index]).IDVendedor);
   SubItems.Add( TVendedor(ListaActiva.objects[Item.Index]).nombre );
   SubItems.Add( FloatToStr(TVendedor(ListaActiva.objects[Item.Index]).Comision));
   end;
end;

procedure TFmVendedores.ListView1DblClick(Sender: TObject);
begin
 TB_editClick(Sender);
end;

procedure TFmVendedores.TB_readdbClick(Sender: TObject);
begin
 ListaCompleta.Clear;
  if TS_SoloActivos.State = tssOn then    // solo activos
   VendedoresLeerListado(ListaCompleta, 'activos')
 else
   VendedoresLeerListado(ListaCompleta, 'todos');
 Ed_busqueda.Text := '';
 ApplyFilter(Ed_busqueda.Text);
 ListView1.ItemIndex := 0;

end;

procedure TFmVendedores.TB_PrintClick(Sender: TObject);
begin
   Bloqueo;
   Pn_Imprimir.Visible := true;
   Pn_Imprimir.BringToFront;
end;

procedure TFmVendedores.TB_addClick(Sender: TObject);
begin
  Editar := false;
  Bloqueo;
  Pn_EditAdd.Visible := true;
  Pn_EditAdd.BringToFront;

   Ed_IdVendedor.Enabled := true;
   Ed_IdVendedor.text := '';
   Ed_nombre.Text := '';
   Ed_Comision.Text := '';

end;

procedure TFmVendedores.TB_DeleteClick(Sender: TObject);
var
 IdVendedor : Integer;
begin
 IdVendedor :=  StrToInt(Listview1.items[Listview1.ItemIndex].Caption);

 if DialogoBox('¿Confirma borrar el Vendedor : '+ Listview1.items[Listview1.ItemIndex].Caption +' ?','Borrar Vendedor', 1,1)  then
   VendedoresBorrar(IdVendedor) ;


end;

procedure TFmVendedores.TB_editClick(Sender: TObject);
var
  Vendedor : TVendedor;
  i : integer;
begin
   Editar := true;
   Bloqueo;

   Pn_EditAdd.Visible := true;
   Pn_EditAdd.BringToFront;

   Vendedor := TVendedor.create;
   Vendedor.IDVendedor :=  StrToInt(Listview1.items[Listview1.ItemIndex].Caption);
   VendedoresLeerVendedor(Vendedor);

   Ed_IdVendedor.Enabled := false;
   Ed_IdVendedor.text := IntToStr(Vendedor.IdVendedor);
   Ed_Nombre.Text := Vendedor.Nombre;
   Ed_comision.Text := FloatToStr(Vendedor.comision);
   If Vendedor.activo then CV_Activo.State := cbChecked else  CV_Activo.State := cbUnchecked;
    Me_Observaciones.clear;
      Me_Observaciones.text := Vendedor.Observaciones;


   Vendedor.free;
end;

procedure TFmVendedores.TB_ExitClick(Sender: TObject);
begin
 close;
end;

end.

